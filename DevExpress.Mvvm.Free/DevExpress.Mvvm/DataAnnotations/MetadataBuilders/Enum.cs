using DevExpress.Mvvm.Native;
using System;
using System.Collections.Generic;
using System.Linq.Expressions;
using System.Reflection;
using System.Windows.Input;

namespace DevExpress.Mvvm.DataAnnotations {
    public interface IEnumMetadataProvider<T> where T : struct {
        void BuildMetadata(EnumMetadataBuilder<T> builder);
    }

    public class EnumMetadataBuilder<T> : MetadataBuilderBase<T> where T : struct {
        public EnumMetadataBuilder() { }
        public EnumMemberMetadataBuilder<T> Member(T member) {
            return GetBuilder(member.ToString(), x => new EnumMemberMetadataBuilder<T>(x, this));
        }
    }

    public class EnumMemberMetadataBuilder<T> : MemberMetadataBuilderBase<T, EnumMemberMetadataBuilder<T>, EnumMetadataBuilder<T>>
        where T : struct {
        internal EnumMemberMetadataBuilder(MemberMetadataStorage storage, EnumMetadataBuilder<T> parent)
            : base(storage, parent) {
        }
        public EnumMemberMetadataBuilder<T> DisplayName(string name) {
            return DataAnnotationsAttributeHelper.DisplayNameCore(this, name);
        }
        public EnumMemberMetadataBuilder<T> Description(string description) {
            return DataAnnotationsAttributeHelper.DescriptionCore(this, description);
        }
        public EnumMemberMetadataBuilder<T> NotAutoGenerated() {
            return DataAnnotationsAttributeHelper.NotAutoGeneratedCore(this);
        }
        public EnumMemberMetadataBuilder<T> ImageUri(string imageUri) {
            return ImageUriCore(imageUri);
        }
        public EnumMetadataBuilder<T> EndMember() {
            return parent;
        }
    }
}